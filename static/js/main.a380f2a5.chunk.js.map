{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Title/Title.js","components/FriendCard/FriendCard.js","components/Navbar/Navbar.js","Column.js","Container.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","FriendCard","value","id","onClick","handleClick","alt","name","src","image","Navbar","href","title","rightWrong","score","topScore","Column","size","split","map","join","Container","concat","fluid","Row","App","state","friends","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","_ref","shuffleFriends","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Title_Title","src_Container","src_Row","src_Column","components_FriendCard_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a380f2a5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n    <div className=\"card\"\n        value={props.id}\n        onClick={() => props.handleClick(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image}\n            />\n        </div>\n    </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Navbar\";\n\nconst Navbar = props => (\n  <nav>\n    <ul>\n      <li className=\"brand animated lightSpeedIn\">\n        <a href=\"/Marvel Game/\">{props.title}</a>\n      </li>\n\n      <li id=\"rw\">{props.rightWrong}</li>\n\n      <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n      <li id=\"top-sco\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport FriendCard from \"./components/FriendCard\";\nimport friends from \"./friends.json\";\nimport Navbar from \"./components/Navbar\";\nimport Column from \"./Column\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\n\nfunction shuffleFriends(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Set this.state\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  // adds to the score\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ rightWrong: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  // players loses and resets\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"Sorry Try Again!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = shuffleFriends(friends);\n    this.setState({ friends: shuffledFriends });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          title=\"Marvel Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n      Click on the images to win, but dont click on an image more than once or lose!\n       </Title>\n\n        <Container>\n          <Row>\n            {this.state.friends.map(friends => (\n              <Column size=\"md-3 sm-6\">\n                <FriendCard\n                  key={friends.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friends.id}\n                  image={friends.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n// class App extends Component {\n//   // Set this.state\n//   state = {\n//     friends,\n//     currentScore: 0,\n//     topScore: 0,\n//     rightWrong: \"\",\n//     clicked: [],\n//   };\n\n//   function shuffleFriends(array) {\n//     for (let i = array.length - 1; i > 0; i--) {\n//       let j = Math.floor(Math.random() * (i + 1));\n//       [array[i], array[j]] = [array[j], array[i]];\n//     }\n//     return array;\n//   };\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}